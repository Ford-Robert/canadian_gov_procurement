---
title: "EDA"
author: 
  - Robert Ford
format: pdf
---

```{r}
#| include: false
#| warning: false
#| message: false

library(tidyverse)
library(ggplot2)
library(dplyr)
library(lubridate)
library(scales)
library(knitr)
library(kableExtra)
library(zoo)

df <- read_csv(here::here("data/analysis_data/cleaned_data.csv"))

View(df)

```


```{r fig-template}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: template
#| fig-align: center


```


```{r fig-template96}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: template
#| fig-align: center

#TODO Fix colors and supplier names and order of supps (highest to lowest)
View(aggregated_df)

# Create the bar chart with legend removed
ggplot(aggregated_df, aes(x = reorder(word, total_amount), y = total_amount, fill = buyer)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  labs(
    title = "Top 10 Suppliers by Aggregated Amount Awarded",
    x = "Supplier",
    y = "Total Amount Awarded"
    # Remove the legend title by not specifying 'fill' in labs
  ) +
  theme_minimal() +
  theme(legend.position = "right")

```

```{r fig-head}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: template
#| fig-align: center

df_table <- df %>% select(-contract, -start_date, -end_date)

kable(head(df_table, 5), caption = "Sample of the Data") %>%
  kable_styling(font_size = 10, latex_options = c("scale_down"))

```


This graph shows how much was awarded by month
```{r fig-award-amount-month}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: template
#| fig-align: center


df_fig <- df %>%
  mutate(year_month = floor_date(award_date, "month"))

# Aggregate the amount by 'year_month'
monthly_spending <- df_fig %>%
  group_by(year_month) %>%
  summarise(total_amount = sum(amount, na.rm = TRUE))

# Plot the line graph with formatted y-axis labels
ggplot(monthly_spending, aes(x = year_month, y = total_amount)) +
  geom_line(color = "blue") +
  labs(title = "Amount Spent Each Month",
       x = "Time",
       y = "Amount Awarded") +
  scale_x_date(date_labels = "%Y-%m", date_breaks = "1 month") +
  scale_y_continuous(labels = comma) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```


```{r fig-template4}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: template
#| fig-align: center

start_date_min <- min(df$start_date)
end_date_max <- as.Date("2030-12-31")

# Create events at start dates (add per_day amount)
events_start <- data.frame(date = df$start_date, amount = df$per_day)

# Create events at end dates + 1 day (subtract per_day amount)
events_end <- data.frame(date = df$end_date + 1, amount = -df$per_day)

# Combine start and end events
events <- rbind(events_start, events_end)

# Aggregate amounts by date
events <- aggregate(amount ~ date, data = events, sum)

# Sort events by date
events <- events[order(events$date), ]

# Compute cumulative sum of amounts to get the total per_day amount active on each date
events$cumulative_amount <- cumsum(events$amount)

# Create a full sequence of dates from the earliest start date to the latest end date
date_seq <- seq(start_date_min, end_date_max, by = "day")

# Merge cumulative amounts with the full date sequence
amounts <- data.frame(date = date_seq)
amounts <- merge(amounts, events[, c("date", "cumulative_amount")], by = "date", all.x = TRUE)

# Carry forward the last observed cumulative_amount to fill in missing dates
amounts$cumulative_amount <- na.locf(amounts$cumulative_amount, na.rm = FALSE)
amounts$cumulative_amount[is.na(amounts$cumulative_amount)] <- 0

# Plot the line chart using ggplot2
library(ggplot2)
ggplot(amounts, aes(x = date, y = cumulative_amount)) +
  geom_line(color = "blue") +
  labs(title = "Total Amount Spent Over Time",
       x = "Date",
       y = "Total Amount Spent per Day") +
  scale_y_continuous(labels = comma) +
  theme_minimal()


```
```{r}



```

```{r fig-template3}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: template
#| fig-align: center


# Summarize total amount spent by each buyer
buyer_totals <- df %>%
  group_by(buyer) %>%
  summarise(total_amount = sum(amount, na.rm = TRUE)) %>%
  arrange(desc(total_amount))

# Select the top ten buyers
top_ten_buyers <- buyer_totals %>%
  slice_head(n = 10)

# Plot the bar chart
ggplot(top_ten_buyers, aes(x = reorder(buyer, total_amount), y = total_amount)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  coord_flip() +
  labs(title = "Top 10 Buyers by Total Amount Spent",
       x = "Buyer",
       y = "Total Amount Spent") +
  scale_y_continuous(labels = comma) +
  theme_minimal()

```

```{r fig-template2}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: template
#| fig-align: center

supplier_totals <- df %>%
  group_by(supplier) %>%
  summarise(total_amount = sum(amount, na.rm = TRUE)) %>%
  arrange(desc(total_amount))

# Select the top ten suppliers
top_suppliers <- supplier_totals %>%
  slice_head(n = 10)

# Wrap supplier names for better legibility
top_suppliers$supplier <- str_wrap(top_suppliers$supplier, width = 15)

# Plot the bar chart
ggplot(top_suppliers, aes(x = reorder(supplier, -total_amount), y = total_amount)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  labs(title = "Amount Awarded to Top 10 Suppliers",
       x = "Supplier",
       y = "Total Amount Awarded") +
  scale_y_continuous(labels = comma) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.margin = unit(c(1, 1, 1, 2), "cm")  # Adjust margins if necessary
  )

```
#TODO Color code by buyer

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: "Average Contract Length (Days) by Government Department (Top 10)"
#| fig-align: center

# Load necessary libraries
library(dplyr)
library(ggplot2)



# Calculate average contract length per buyer (government department)
avg_contract_length <- df %>%
  mutate(contract_length_days = as.numeric(difftime(end_date, start_date, units = "days"))) %>%
  group_by(buyer) %>%
  summarise(`Average Length of Contract (Days)` = mean(contract_length_days, na.rm = TRUE)) %>%
  arrange(desc(`Average Length of Contract (Days)`)) %>%
  slice_head(n = 10)  # Select top 10 departments

# Create the bar chart
ggplot(avg_contract_length, aes(x = reorder(buyer, `Average Length of Contract (Days)`), y = `Average Length of Contract (Days)`)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  coord_flip() +
  labs(x = "Government Department", y = "Average Contract Length (Days)", title = "Average Contract Length (Days) by Government Department (Top 10)") +
  theme_minimal()




```

```{r}
#| message: false
#| echo: false
#| warning: false
#| fig-cap: "Average Contract Size by Government Department (Top 10)"
#| fig-align: center

# Load necessary libraries
library(dplyr)
library(ggplot2)
library(scales)  # For formatting currency

# Calculate average contract size per buyer (government department)
avg_contract_size <- df %>%
  group_by(buyer) %>%
  summarise(`Average Contract Size` = mean(amount, na.rm = TRUE)) %>%
  arrange(desc(`Average Contract Size`)) %>%
  slice_head(n = 10)  # Select top 10 departments

# Create the bar chart
ggplot(avg_contract_size, aes(x = reorder(buyer, `Average Contract Size`), y = `Average Contract Size`)) +
  geom_bar(stat = "identity", fill = "darkgreen") +
  coord_flip() +
  scale_y_continuous(labels = dollar_format(prefix = "$")) +
  labs(x = "Government Department", y = "Average Contract Size", title = "Average Contract Size by Government Department (Top 10)") +
  theme_minimal()
```

```{r}
# Convert award_date to Date type and extract the year
df$award_date <- as.Date(df$award_date, format = "%Y-%m-%d")
df$year <- format(df$award_date, "%Y")

# Filter for military spending (where buyer is "National Defence")
military_df <- df %>%
  filter(buyer == "National Defence")

# Summarize total spending per year
military_spending_per_year <- military_df %>%
  group_by(year) %>%
  summarize(total_spending = sum(amount, na.rm = TRUE))

# Create the bar chart
ggplot(data = military_spending_per_year, aes(x = year, y = total_spending)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  labs(title = "Military Spending Per Year", x = "Year", y = "Total Spending") +
  theme_minimal() +
  scale_y_continuous(labels = dollar_format(prefix = "$")) +
  theme(plot.title = element_text(hjust = 0.5))

```


```{r}

df$year <- format(df$award_date, "%Y")

# Filter for public services
public_services_df <- df %>%
  filter(buyer == "Public Services and Procurement Canada")

# Summarize total spending per year
public_spending_per_year <- public_services_df %>%
  group_by(year) %>%
  summarize(total_spending = sum(amount, na.rm = TRUE))

# Create the bar chart
ggplot(data = public_spending_per_year, aes(x = year, y = total_spending)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  labs(title = "Public Services Spending Per Year", x = "Year", y = "Total Spending") +
  theme_minimal() +
  scale_y_continuous(labels = dollar_format(prefix = "$")) +
  theme(plot.title = element_text(hjust = 0.5))

```


```{r}
df_filtered <- df %>%
  filter(format(award_date, "%Y") != "2019")

# Add "year" column to the dataframe
df_filtered$year <- format(df$award_date, "%Y")


# Define selected buyers
selected_buyers <- c(
  "National Defence",
  "Public Services and Procurement Canada",
  "Shared Services Canada",
  "Public Health Agency of Canada",
  "Fisheries and Oceans Canada"
)

# Create a new column to categorize buyers
df_filtered$buyer_category <- ifelse(df_filtered$buyer %in% selected_buyers, df_filtered$buyer, "Other")

# Summarize data
stacked_df <- df_filtered %>%
  group_by(year, buyer_category) %>%
  summarize(total_spending = sum(amount, na.rm = TRUE)) %>%
  ungroup()

# Ensure the order of the stacks matches the specified order
stacked_df$buyer_category <- factor(stacked_df$buyer_category, levels = c(selected_buyers, "Other"))

# Create the stacked bar chart
ggplot(data = stacked_df, aes(x = year, y = total_spending, fill = buyer_category)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(
    values = c(
      "National Defence" = "steelblue",
      "Public Services and Procurement Canada" = "orange",
      "Shared Services Canada" = "green",
      "Public Health Agency of Canada" = "purple",
      "Fisheries and Oceans Canada" = "red",
      "Other" = "gray"
    )
  ) +
  labs(
    title = "Spending by Selected Buyers Per Year",
    x = "Year",
    y = "Total Spending",
    fill = "Buyer"
  ) +
  theme_minimal() +
  scale_y_continuous(labels = scales::dollar_format(prefix = "$")) +
  theme(plot.title = element_text(hjust = 0.5))
```
```{r}
df$year <- format(df$award_date, "%Y")

# Filter data for the specified buyers
selected_buyers <- c(
  "National Defence",
  "Public Services and Procurement Canada",
  "Shared Services Canada",
  "Public Health Agency of Canada",
  "Fisheries and Oceans Canada"
)

grouped_df <- df %>%
  filter(buyer %in% selected_buyers) %>%
  group_by(year, buyer) %>%
  summarize(total_spending = sum(amount, na.rm = TRUE)) %>%
  ungroup()

# Ensure the order of the groups matches the specified order
grouped_df$buyer <- factor(grouped_df$buyer, levels = selected_buyers)

# Create the grouped bar chart
ggplot(data = grouped_df, aes(x = year, y = total_spending, fill = buyer)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
  scale_fill_manual(
    values = c("National Defence" = "steelblue",
               "Public Services and Procurement Canada" = "orange",
               "Shared Services Canada" = "green",
               "Public Health Agency of Canada" = "purple",
               "Fisheries and Oceans Canada" = "red")
  ) +
  labs(
    title = "Spending by Selected Buyers Per Year",
    x = "Year",
    y = "Total Spending",
    fill = "Buyer"
  ) +
  theme_minimal() +
  scale_y_continuous(labels = dollar_format(prefix = "$")) +
  theme(plot.title = element_text(hjust = 0.5))


```



```{r}
library(ggplot2)
library(dplyr)
library(scales) # For formatting y-axis labels

library(ggplot2)
library(dplyr)
library(scales) # For formatting y-axis labels

# Filter out records from 2019
df_filtered <- df %>%
  filter(format(award_date, "%Y") != "2019")

# Extract the year from award_date
df_filtered$year <- format(df_filtered$award_date, "%Y")

# Define the selected buyers
selected_buyers <- c(
  "National Defence",
  "Public Services and Procurement Canada",
  "Shared Services Canada",
  "Public Health Agency of Canada",
  "Fisheries and Oceans Canada"
)

# Add a new column for buyer categories
df_filtered <- df_filtered %>%
  mutate(buyer_category = ifelse(buyer %in% selected_buyers, buyer, "Other"))

# Summarize total spending per year for each buyer category
grouped_df <- df_filtered %>%
  group_by(year, buyer_category) %>%
  summarize(total_spending = sum(amount, na.rm = TRUE)) %>%
  ungroup()

# Ensure the order of the groups matches the specified order, with "Other" last
grouped_df$buyer_category <- factor(
  grouped_df$buyer_category,
  levels = c(selected_buyers, "Other")
)

# Scale the total_spending to billions
grouped_df <- grouped_df %>%
  mutate(total_spending_billion = total_spending / 1e9)

# Create the grouped bar chart
ggplot(data = grouped_df, aes(x = year, y = total_spending_billion, fill = buyer_category)) +
  geom_bar(
    stat = "identity",
    position = position_dodge(width = 0.9), # Adjust dodge width
    width = 0.8 # Adjust bar width
  ) +
  scale_fill_manual(
    values = c(
      "National Defence" = "steelblue",
      "Public Services and Procurement Canada" = "orange",
      "Shared Services Canada" = "green",
      "Public Health Agency of Canada" = "purple",
      "Fisheries and Oceans Canada" = "red",
      "Other" = "gray"
    )
  ) +
  scale_y_continuous(
    labels = comma_format(accuracy = 1), # Formats y-axis labels without decimal places
    breaks = pretty_breaks(n = 5), # Ensures approximately 5 breaks like 5, 10, 15
    expand = expansion(mult = c(0, 0.05)) # Adds a small space above the highest bar
  ) +
  labs(
    title = "Spending by Selected and Other Buyers Per Year",
    subtitle = "Amounts are in Billions of CAD",
    x = "Year",
    y = "Total Spending (Billions)",
    fill = "Buyer",
    caption = "."
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 12),
    axis.text.x = element_text(angle = 45, hjust = 1), # Rotate x-axis labels for readability
    axis.text = element_text(size = 12),
    axis.title = element_text(size = 14),
    legend.title = element_text(size = 14),
    legend.text = element_text(size = 12),
    plot.caption = element_text(hjust = 0.5, size = 10, face = "italic") # Centered caption
  )



```


```{r}
#View(df)

df_filtered <- df %>%
  filter(amount <= 100000)

# Optional: Check how many rows are left
num_less_than_200k <- nrow(df_filtered)
total_contracts <- nrow(df)

percent_less_than <- num_less_than_200k / total_contracts

print(percent_less_than)


# Step 3: Create bins spanning every 10,000 CAD up to 200,000
# Define the bin width
bin_width <- 10000  # 10,000 CAD

# Create a sequence of break points from 0 to 200,000
breaks <- seq(0, 200000, by = bin_width)

# To ensure that the upper limit includes 200,000, set 'right = FALSE'
# This means intervals are [0,10000), [10000,20000), ..., [190000,200000]
df_filtered <- df_filtered %>%
  mutate(amount_bin = cut(amount, breaks = breaks, right = FALSE, include.lowest = TRUE))

# Step 4: Count the number of contracts in each bin
contract_counts_df <- df_filtered %>%
  group_by(amount_bin) %>%
  summarize(Contract_Count = n()) %>%
  ungroup()

# View the binned counts
print(contract_counts_df)


contract_counts_df$amount_bin <- as.character(contract_counts_df$amount_bin)

# Create the bar plot
barplot(
  height = contract_counts_df$Contract_Count,
  names.arg = contract_counts_df$amount_bin,
  las = 2,  # Rotate x-axis labels to perpendicular
  col = "skyblue",
  border = "black",
  main = "Number of Contracts per 10,000 CAD Award Amount Range",
  xlab = "Award Amount (CAD)",
  ylab = "Number of Contracts",
  cex.names = 0.8  # Adjust label size for readability
)
```
```{r}
# Step 1: Filter the data for contracts <= 100,000 CAD
df_filtered <- df %>%
  filter(amount <= 100000)

# Optional: Check how many rows are left
num_less_than_100k <- nrow(df_filtered)
total_contracts <- nrow(df)


print(num_less_than_100k)

percent_less_than <- num_less_than_100k / total_contracts

print(paste0("Percentage of contracts <= 100,000 CAD: ", round(percent_less_than * 100, 2), "%"))

# Step 2: Create bins spanning every 10,000 CAD up to 100,000
bin_width <- 10000  # 10,000 CAD

# Create a sequence of break points from 0 to 100,000
breaks <- seq(0, 100000, by = bin_width)

# Assign each amount to a bin
df_filtered <- df_filtered %>%
  mutate(amount_bin = cut(amount, breaks = breaks, right = FALSE, include.lowest = TRUE))

# Step 3: Count the number of contracts in each bin
contract_counts_df <- df_filtered %>%
  group_by(amount_bin) %>%
  summarize(Contract_Count = n()) %>%
  ungroup()

# Ensure that all bins are represented, even if count is zero
all_bins <- levels(df_filtered$amount_bin)
contract_counts_df <- contract_counts_df %>%
  right_join(data.frame(amount_bin = all_bins), by = "amount_bin") %>%
  replace_na(list(Contract_Count = 0)) %>%
  arrange(amount_bin)

# Step 4: Create readable labels for x-axis in thousands
contract_counts_df <- contract_counts_df %>%
  mutate(
    # Extract lower and upper bounds from amount_bin
    lower = as.numeric(gsub("\\[|\\)", "", sapply(strsplit(as.character(amount_bin), ","), `[`, 1))),
    upper = as.numeric(gsub("\\[|\\)|\\]", "", sapply(strsplit(as.character(amount_bin), ","), `[`, 2))),
    amount_label = paste0(lower / 1000, "-", upper / 1000, "")
  )

# Step 5: Scale the y-axis counts to thousands if applicable
max_count <- max(contract_counts_df$Contract_Count)
if (max_count >= 1000) {
  contract_counts_df <- contract_counts_df %>%
    mutate(Contract_Count_k = Contract_Count / 1000)
  y_label_unit <- "Thousands"
} else {
  contract_counts_df <- contract_counts_df %>%
    mutate(Contract_Count_k = Contract_Count)  # No scaling
  y_label_unit <- "Number of Contracts"
}

# Step 6: Create the ggplot2 bar chart
ggplot(contract_counts_df, aes(x = amount_label, y = Contract_Count_k)) +
  geom_bar(stat = "identity", fill = "skyblue", color = "black") +
  scale_y_continuous(
    labels = if (max_count >= 1000) {
      label_number(scale = 1, accuracy = 1)
    } else {
      label_number(accuracy = 1)
    },
    expand = expansion(mult = c(0, 0.05))
  ) +
  labs(
    title = "Number of Contracts per 10,000 CAD Award Amount Range",
    x = "Award Amount (Thousands)",
    y = paste0("Number of Contracts ", if (max_count >= 1000) "(Thousands)" else ""),
    caption = "Data includes contracts <= 100,000 CAD."
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
    axis.text.y = element_text(size = 12),
    axis.title = element_text(size = 14),
    plot.caption = element_text(hjust = 0.5, size = 10, face = "italic")
  )



```


```{r}
# Step 1: Create a new column 'contract_size' categorizing contracts
df <- df %>%
  mutate(
    contract_size = ifelse(amount <= 100000, "Small Contracts (≤ 100k)", "Big Contracts (> 100k)")
  )

# Summarize total amount spent per contract size category
total_spent_df <- df %>%
  group_by(contract_size) %>%
  summarize(
    total_amount_spent = sum(amount, na.rm = TRUE)
  ) %>%
  ungroup()

# Convert the total amount to billions of CAD
total_spent_df <- total_spent_df %>%
  mutate(total_amount_billion = total_amount_spent / 1e9)

# Optional: Display the summarized data
print(total_spent_df)

# Create the bar chart
ggplot(total_spent_df, aes(x = contract_size, y = total_amount_billion, fill = contract_size)) +
  geom_bar(stat = "identity", width = 0.6) +
  geom_text(aes(label = paste0(round(total_amount_billion, 2), "B")), 
            vjust = -0.5, 
            size = 5) +  # Adds labels above the bars
  scale_fill_manual(
    values = c("Small Contracts (≤ 100k)" = "steelblue", "Big Contracts (> 100k)" = "tomato")
  ) +
  scale_y_continuous(
    labels = scales::number_format(scale = 1, suffix = "B"),  # Displays y-axis in billions
    expand = expansion(mult = c(0, 0.1))  # Adds space above the bars for labels
  ) +
  labs(
    title = "Total Amount Spent on Contracts",
    subtitle = "Comparison between Small (≤ 100k CAD) and Big (> 100k CAD) Contracts",
    x = "Contract Size",
    y = "Total Amount Spent (Billions of CAD)"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 14),
    axis.text.x = element_text(angle = 0, hjust = 0.5, size = 14),
    axis.text.y = element_text(size = 12),
    axis.title = element_text(size = 16),
    legend.position = "none",  # Removes the legend as it's redundant
    plot.caption = element_text(hjust = 0.5, size = 10, face = "italic")
  )
 


```

```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(scales)

# Assuming 'df' is your data frame and has a column 'amount'

# Step 1: Categorize contracts based on amount
df <- df %>%
  mutate(
    contract_size = ifelse(amount <= 100000, "Small Contracts (≤ 100k)", "Big Contracts (> 100k)")
  )

# Step 2: Ensure the order of contract_size (Small on left, Big on right)
df$contract_size <- factor(df$contract_size, levels = c("Small Contracts (≤ 100k)", "Big Contracts (> 100k)"))

# Step 3: Summarize total amount spent per contract size category
total_spent_df <- df %>%
  group_by(contract_size) %>%
  summarize(
    total_amount_spent = sum(amount, na.rm = TRUE)
  ) %>%
  ungroup()

# Step 4: Convert total amount to billions of CAD
total_spent_df <- total_spent_df %>%
  mutate(total_amount_billion = total_amount_spent / 1e9)

# Optional: Display the summarized data
print(total_spent_df)

# Step 5: Create the ggplot2 bar chart
ggplot(total_spent_df, aes(x = contract_size, y = total_amount_billion, fill = contract_size)) +
  geom_bar(stat = "identity", width = 0.6) +
  geom_text(aes(label = paste0(round(total_amount_billion, 2), "B")), 
            vjust = -0.5, 
            size = 5) +
  scale_fill_manual(
    values = c("Small Contracts (≤ 100k)" = "steelblue", "Big Contracts (> 100k)" = "tomato")
  ) +
  scale_y_continuous(
    labels = scales::number_format(scale = 1, suffix = "B"),  # Y-axis in billions
    expand = expansion(mult = c(0, 0.1))  # Adds space above the bars for labels
  ) +
  labs(
    title = "Total Amount Spent on Contracts",
    subtitle = "Comparison between Small (≤ 100k CAD) and Big (> 100k CAD) Contracts",
    x = "Contract Size",
    y = "Total Amount Spent (Billions of CAD)"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 14),
    axis.text.x = element_text(angle = 0, hjust = 0.5, size = 14),
    axis.text.y = element_text(size = 12),
    axis.title = element_text(size = 16),
    legend.position = "none",  # Removes the legend as it's redundant
    plot.caption = element_text(hjust = 0.5, size = 10, face = "italic"),
    panel.grid.major.y = element_line(color = "grey80", linetype = "dashed")  # Adds dashed grid lines
  )



```